swagger: "2.0"
info: 
  title: Api yessss
  description: Api yessss
  version: "1.0.0"
  contact:
    name: "Aziz Matyakubov"
    email: "a.matyaqubov1471@gmail.com"
    url: "https://linkedin.com/in/aziz-matyakubov-1a1a6b1b3"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "localhost:5000"
basePath: /api/v1/
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  # auth login
  /auth/login:
    post:
      # send email and password in body
      tags:
        - Auth
      summary: Login
      description: Login
      operationId: Login
      parameters:
        - name: body
          in: body
          description: Login
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
  
  # auth register
  /auth/register:
    post:
      tags:
        - Auth
      summary: "Sign up"
      description: "In this method you can sign up. You need to send name, surname, email and password in body. Except password all fields are required. If there is no password, app will use default password. Default password is 'password'"
      operationId: "SignUp"
      parameters:
        - name: body
          in: body
          description: Login
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              password:
                type: string
            
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Internal server error"

  # auth refresh
  /auth/refresh:
    get:
      tags:
        - Auth
      summary: "Refresh token"
      description: "Refresh token"


  # auth logout
  /auth/logout:
    get:
      tags:
        - Auth
      summary: "Logout"
      description: "This method is used to logout. You need to send refresh token in cookie. You will get 200 status code. After that, refresh token will be deleted from database"
      operationId: "Logout"
      parameters:
        - name: cookie
          in: cookie
          description: "Refresh token"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Internal server error"

  # auth get me
  /auth/me:
    get:
      tags:
        - Auth
      summary: "Get me"
      description: "This method is used to get user info. You need to send access token in header. App will decode access token and get user id. After that, app will get user info from database"
      operationId: "GetMe"
      security:
        - JWT: []
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Internal server error"


  ### users
  /users:
    get:
      security:
        - JWT: []
      tags:
        - Users
      summary: "Get all users"
      description: "Get all users"
      operationId: "getUsers"
      
      responses:
        200:
          description: "Successful operation"
        400:
          description: "Invalid input"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Internal server error"
    
  /users/{id}:
    get:
      summary: Get user by id
      description: This method is used to get user by id. You need to send access token in header and user id in url. Role of user must be admin or user must be owner of this user. 
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: User id that you want to get
          required: true
          type: string

      security:
        - JWT: []
        
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id: 
                type: integer
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              img: 
                type: string
              role:
                type: string
              position:
                type: string
              department:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  employees: 
                  # Employess is array and includes users id
                    type: array
                    items:
                      type: string

        400:
          description: Bad request
    put:
      summary: Update user by id
      description: This method is used to update user by id. You need to send access token in header and user id in url. Role of user must be admin or user must be owner of this user. You can update name, surname, email. 
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string  

        - name: body
          in: body
          description: User info
          type: object
          properties:
            name:
              type: string
            surname:
              type: string
            email:
              type: string        
      security:
        - JWT: []

      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id: 
                type: integer
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              img: 
                type: string
              role:
                type: string
              position:
                type: string
              department:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  employees: 
                  # Employess is array and includes users id
                    type: array
                    items:
                      type: string

        400:
          description: Bad request
    delete:
      summary: Delete user by id
      description: Delete user by id
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string

        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id: 
                type: integer
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              img: 
                type: string
              role:
                type: string
              position:
                type: string
              department:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  employees: 
                  # Employess is array and includes users id
                    type: array
                    items:
                      type: string

        400:
          description: Bad request
    
      summary: countUsers 
      description: countUsers
      tags:
        - Users
      parameters:
        - name: Authorization
          in: header
          description: User token
          required: true
          type: string

  /users/countUsers:
    get:
      summary: countUsers 
      description: countUsers
      tags:
        - Users
      parameters:
        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              count:
                type: integer
        400:
          description: Bad request

  /users/avatar:
    put:
      summary: Uploads a file.
        consumes:
         - multipart/form-data
        parameters:
         - in: formData
           name: upfile
           type: file
           description: The file to upload.
        tags:
         - Users
      responses:  
        200: 
          description: Success
          schema:
            type: object
            properties:
              id: 
                type: integer
              name:
                type: string
              surname:
                type: string
              email:
                type: string
              img: 
                type: string
              role:
                type: string
              position:
                type: string
              department:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  description:
                    type: string
                  employees: 
                  # Employess is array and includes users id
                    type: array
                    items:
                      type: string

        400:
          description: Bad request

  /users/downlaodCSV:
    get:
      summary: Download CSV
      description: Download CSV
      tags:
        - Users
      parameters:
        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
        400:
          description: Bad request

  ### departments
  /departments:
    post:
      tags:
        - Departments
      summary: "Create department"

    get: 
      tags:
        - Departments
      summary: "Get all departments"

  /departments/{id}:
    get:
      summary: Get department by id
      description: Get department by id
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          description: Department id
          required: true
          type: string

        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              employees: 
              # Employess is array and includes users id
                type: array
                items:
                  type: string

        400:
          description: Bad request
    put:
      summary: Update department by id
      description: Update department by id
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          description: Department id
          required: true
          type: string

        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              employees: 
              # Employess is array and includes users id
                type: array
                items:
                  type: string

        400:
          description: Bad request
    delete:
      summary: Delete department by id
      description: Delete department by id
      tags:
        - Departments
      parameters:
        - name: id
          in: path
          description: Department id
          required: true
          type: string

        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              employees: 
              # Employess is array and includes users id
                type: array
                items:
                  type: string

  /departments/search:
    get:
      summary: Search department by name
      description: Search department by name
      tags:
        - Departments
      parameters:
        - name: name
          in: query
          description: Department name
          required: true
          type: string

        - name: Authorization
          in: header
          description: User token
          required: true
          type: string
      responses:
        200: 
          description: Success
          schema:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              description:
                type: string
              employees: 
              # Employess is array and includes users id
                type: array
                items:
                  type: string

        400:
          description: Bad request

# JWT token
securityDefinitions:
  JWT:
    type: apiKey
    name: Authorization
    in: header


### definitions
definitions:
  User:
    properties:
      id:
        type: integer
      name:
        type: string
      surname:
        type: string
      email:
        type: string
      password:
        type: string
      img:
        type: string
      role:
        type: string
      position:
        type: string
      department:
        type: integer
        description: Department id
      refreshToken:
        type: string
    
  Department:
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      employees: 
      # Employess is array and includes users id
        type: array
        items:
          type: string
    
 